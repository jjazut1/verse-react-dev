rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Remove temporary overly permissive rule
    // match /{document=**} {
    //  allow read: if true;
    //  allow write: if false;
    // }

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isTeacher() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        request.auth.uid == resource.data.userId &&  // If checking the user's own document
        resource.data.role == "teacher";
    }

    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }
    
    function isTeacherOrAdmin() {
      // Use this in non-user collections
      return isAuthenticated() && 
        (
          // Check if the user has a document with their UID with teacher/admin role
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          (
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "teacher" ||
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin"
          )
        );
    }
    
    // Helper function to check if request is from a service account
    function isServiceAccount() {
      return request.auth != null && 
             request.auth.token != null && 
             request.auth.token.email != null && 
             (
               // Support both production and development service accounts
               request.auth.token.email.matches(".*@verse-11f2d.iam.gserviceaccount.com") ||
               request.auth.token.email.matches(".*@verse-dev-central.iam.gserviceaccount.com") ||
               // Also allow compute service accounts
               request.auth.token.email.matches(".*-compute@developer.gserviceaccount.com") ||
               // Direct Firebase service account
               request.auth.token.email == "firebase-adminsdk-fbsvc@verse-dev-central.iam.gserviceaccount.com"
             );
    }
    
    // Allow anyone to read high scores
    match /highScores/{highScoreId} {
      allow read: if true;
      allow create: if 
        // Basic field validation
        request.resource.data.playerName is string &&
        request.resource.data.playerName.size() >= 3 &&
        request.resource.data.playerName.size() <= 12 &&
        request.resource.data.playerName.matches('^[A-Za-z0-9\\s]+$') &&
        
        // Profanity check (case-insensitive)
        !request.resource.data.playerName.lower().matches('.*\\b(ass|fuck|shit|damn|bitch|crap|piss|dick|cock|pussy|whore|slut|bastard)\\b.*') &&
        
        // Score validation
        request.resource.data.score is number &&
        request.resource.data.score >= 0 &&
        request.resource.data.score <= 1000 &&
        request.resource.data.configId is string &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.gameType is string &&
        
        // Game config validation - only check that config exists and type matches
        exists(/databases/$(database)/documents/userGameConfigs/$(request.resource.data.configId)) &&
        (
          // Config type matches the game type
            get(/databases/$(database)/documents/userGameConfigs/$(request.resource.data.configId)).data.type == request.resource.data.gameType
          ||
          // Or it's a public demo config
            request.resource.data.configId in ['xOoA0q7ILtrdqdJt1ki5', 'Ua17C8DK6ZFsujj9Z1ZC']
        );
    }

    
    // Games collection
    match /games/{gameId} {
      allow read: if true;
      allow create, update, delete: if isTeacherOrAdmin();
    }
    
    // Game configurations collection (admin only)
    match /gameConfigs/{configId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // User-created game configurations - CRITICAL COLLECTION
    match /userGameConfigs/{configId} {
      // The key fix - allow all users to read documents, but implement client-side filtering
      // This is necessary for the 'where' query to work properly
      allow read: if true;
      
      allow create: if 
        isAuthenticated() &&
        // Basic field validation
        (
          // Sort Categories Egg game validation
          (request.resource.data.type == 'sort-categories-egg' &&
          request.resource.data.title is string &&
          request.resource.data.title.size() > 0 &&
          request.resource.data.eggQty is number &&
          request.resource.data.eggQty > 0 &&
          request.resource.data.categories is list &&
          request.resource.data.categories.size() > 0) ||
          
          // Simple Whack-a-mole validation
          (request.resource.data.type == 'whack-a-mole' &&
          request.resource.data.title is string &&
          request.resource.data.categories is list) ||
          
          // Spinner Wheel validation
          (request.resource.data.type == 'spinner-wheel' &&
          request.resource.data.title is string &&
          request.resource.data.title.size() > 0 &&
          request.resource.data.items is list &&
          request.resource.data.items.size() > 0)
        ) &&
        // Common fields validation
        request.resource.data.userId == request.auth.uid;
      
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    match /assignments/{assignmentId} {
      // Read allowed for everyone - explicitly set to true for clarity
      allow read: if true;

      // Allow service accounts full access
      allow read, write: if isServiceAccount();

      // Teachers and Admins can create if data is valid
      allow create: if isTeacherOrAdmin() &&
        (!('useEmailLinkAuth' in request.resource.data) || request.resource.data.useEmailLinkAuth is bool);

      // Teachers/Admins can update/delete
      allow update, delete: if isTeacherOrAdmin();

      // Allow teachers/admins full access to assign games
      allow write: if isTeacherOrAdmin();

      // Allow students to update only specific fields
      allow update: if isAuthenticated() &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'completedCount', 'lastCompletedAt', 'emailSent']);

      // Allow direct access updates (for students completing assignments via email links)
      allow update: if 
        // Even when not authenticated, allow updating only specific fields
        request.auth == null &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'completedCount', 'lastCompletedAt']);

      // Allow Firebase Functions to patch specific fields
      allow update: if request.auth != null &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['emailSent', 'useEmailLinkAuth', 'beta']);
    }
    
    // Attempts collection - track student game attempts
    match /attempts/{attemptId} {
      // Allow creating attempts for anyone - students need this when completing assignments
      allow create: if true;
      
      // Only teachers can read attempts (to see student progress)
      allow read: if isTeacherOrAdmin();
      
      // Only the teacher who created the assignment can update/delete attempts
      allow update, delete: if isTeacherOrAdmin();
    }
    
    
    // Users collection
    match /users/{userId} {
      // Allow public read access
      allow read: if true;
      
      // New permission model:
      // 1. Allow admins to perform any operations on any user document
      // 2. Allow users to create their own document (for new accounts and linking Google Auth)
      // 3. Allow users to update their own document BUT not change their role
      // 4. Allow auto-assignment of students to teachers when completing assignments
      allow create: if isAdmin() || 
        request.auth.uid == userId ||
        // Allow creating student records for auto-assignment (when completing assignments)
        (request.resource.data.role == 'student' && 
         request.resource.data.teacherId is string &&
         request.resource.data.email is string &&
         request.resource.data.autoAssigned == true);
         
      allow delete: if isAdmin();
      
      allow update: if isAdmin() || 
        (request.auth.uid == userId && 
         // Users can't change their own role
         request.resource.data.role == resource.data.role) ||
        // Allow auto-assignment updates for students
        (resource.data.role == 'student' &&
         request.resource.data.role == 'student' &&
         // Only allow updating specific auto-assignment fields
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['teacherId', 'teacherEmail', 'name', 'updatedAt', 'lastAssignmentCompletion', 'autoAssigned']) &&
         request.resource.data.teacherId is string &&
         request.resource.data.autoAssigned == true);
    }
    
    // Sort Categories Egg collection
    match /sortCategoriesEgg/{configId} {
      allow read: if true;
      allow create, update, delete: if true;
    }

    // Blank Game Templates collection
    match /blankGameTemplates/{templateId} {
      // Allow teachers and admins to read blank templates
      allow read: if isTeacherOrAdmin();
      // Only admins can modify blank templates
      allow write: if isAdmin();
    }
    
    // Category Templates collection
    match /categoryTemplates/{templateId} {
      // Allow teachers and admins to read and write category templates
      allow read: if isTeacherOrAdmin();
      allow write: if isTeacherOrAdmin();
    }

    // Assignment tokens collection
    match /assignmentTokens/{tokenId} {
      // Only service accounts and cloud functions can create tokens
      allow create: if isServiceAccount();
      
      // Only service accounts and cloud functions can read and update tokens
      allow read, update: if isServiceAccount();
      
      // No one can delete tokens (they should be marked as used instead)
      allow delete: if false;
    }

    // Game Folders collection - for organizing games into folders
    match /gameFolders/{folderId} {
      // Users can read their own folders
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      
      // Users can create folders for themselves with enhanced validation
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        // Required fields validation
        request.resource.data.name is string &&
        request.resource.data.name.size() > 0 &&
        request.resource.data.name.size() <= 100 &&
        request.resource.data.order is number &&
        request.resource.data.order >= 0 &&
        // Optional fields validation
        (!('description' in request.resource.data) || 
         (request.resource.data.description is string && request.resource.data.description.size() <= 500)) &&
        (!('color' in request.resource.data) || 
         (request.resource.data.color is string && request.resource.data.color.matches('^#[0-9A-Fa-f]{6}$'))) &&
        (!('parentId' in request.resource.data) || 
         (request.resource.data.parentId is string && request.resource.data.parentId.size() > 0)) &&
        // Ensure timestamps are properly set
        request.resource.data.createdAt is timestamp &&
        request.resource.data.updatedAt is timestamp;
      
      // Users can update their own folders with field restrictions
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId &&
        request.resource.data.userId == request.auth.uid &&
        // Only allow updating specific fields
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['name', 'description', 'color', 'order', 'updatedAt']) &&
        // Validate updated fields
        request.resource.data.name is string &&
        request.resource.data.name.size() > 0 &&
        request.resource.data.name.size() <= 100 &&
        request.resource.data.order is number &&
        request.resource.data.order >= 0 &&
        (!('description' in request.resource.data) || 
         (request.resource.data.description is string && request.resource.data.description.size() <= 500)) &&
        (!('color' in request.resource.data) || 
         (request.resource.data.color is string && request.resource.data.color.matches('^#[0-9A-Fa-f]{6}$'))) &&
        request.resource.data.updatedAt is timestamp;
      
      // Users can delete their own folders
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Game Folder Assignments collection - for assigning games to folders
    match /gameFolderAssignments/{assignmentId} {
      // Users can read their own assignments
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      
      // Users can create assignments for themselves with enhanced validation
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        // Required fields validation
        request.resource.data.gameId is string &&
        request.resource.data.gameId.size() > 0 &&
        request.resource.data.gameId.size() <= 100 &&
        request.resource.data.folderId is string &&
        request.resource.data.folderId.size() > 0 &&
        request.resource.data.folderId.size() <= 100 &&
        // Ensure timestamp is properly set
        request.resource.data.assignedAt is timestamp &&
        // Verify the folder exists and belongs to the user (cross-reference validation)
        exists(/databases/$(database)/documents/gameFolders/$(request.resource.data.folderId)) &&
        get(/databases/$(database)/documents/gameFolders/$(request.resource.data.folderId)).data.userId == request.auth.uid;
      
      // Users can update their own assignments with field restrictions
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId &&
        request.resource.data.userId == request.auth.uid &&
        // Only allow updating the folderId (moving games between folders)
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['folderId', 'assignedAt']) &&
        // Validate the new folder assignment
        request.resource.data.folderId is string &&
        request.resource.data.folderId.size() > 0 &&
        request.resource.data.folderId.size() <= 100 &&
        request.resource.data.assignedAt is timestamp &&
        // Verify the new folder exists and belongs to the user
        exists(/databases/$(database)/documents/gameFolders/$(request.resource.data.folderId)) &&
        get(/databases/$(database)/documents/gameFolders/$(request.resource.data.folderId)).data.userId == request.auth.uid;
      
      // Users can delete their own assignments
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
  }
} 