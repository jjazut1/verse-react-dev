rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Remove temporary overly permissive rule
    // match /{document=**} {
    //  allow read: if true;
    //  allow write: if false;
    // }

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isTeacher() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        request.auth.uid == resource.data.userId &&  // If checking the user's own document
        resource.data.role == "teacher";
    }

    // Admin tasks (Firestore-triggered)
    match /adminTasks/{taskId} {
      // Only admins can create admin tasks
      allow create: if isAdmin();
      // Allow service accounts to read/update task status
      allow read, update: if isServiceAccount();
      // No deletes from clients
      allow delete: if false;
    }
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }
    
    function isTeacherOrAdmin() {
      // Use this in non-user collections
      return isAuthenticated() && 
        (
          // Check if the user has a document with their UID with teacher/admin role
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          (
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "teacher" ||
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin"
          )
        );
    }
    
    // Helper function to check if request is from a service account
    function isServiceAccount() {
      return request.auth != null && 
             request.auth.token != null && 
             request.auth.token.email != null && 
             (
               // Support both production and development service accounts
               request.auth.token.email.matches(".*@verse-11f2d.iam.gserviceaccount.com") ||
               request.auth.token.email.matches(".*@verse-dev-central.iam.gserviceaccount.com") ||
               // Also allow compute service accounts
               request.auth.token.email.matches(".*-compute@developer.gserviceaccount.com") ||
               // Direct Firebase service account
               request.auth.token.email == "firebase-adminsdk-fbsvc@verse-dev-central.iam.gserviceaccount.com"
             );
    }

    // Enhanced folder validation for 4-level hierarchy
    function isValidFolderData(data) {
      return data.keys().hasAll(['name', 'description', 'color', 'userId', 'order']) &&
             data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
             data.description is string && data.description.size() <= 500 &&
             data.color is string && data.color.size() > 0 &&
             data.userId is string &&
             data.order is number &&
             (!data.keys().hasAny(['parentId']) || data.parentId == null || data.parentId is string) &&
             (!data.keys().hasAny(['depth']) || (data.depth is number && data.depth >= 0 && data.depth <= 3));
    }
    
    // Validate folder depth doesn't exceed 4 levels (0, 1, 2, 3)
    function isValidFolderDepth(data) {
      return !data.keys().hasAny(['depth']) || (data.depth is number && data.depth <= 3);
    }
    
    // Validate parentId ownership (parent must belong to same user)
    function isValidParentOwnership(data) {
      return !data.keys().hasAny(['parentId']) || 
             data.parentId == null || 
             (data.parentId is string && 
              exists(/databases/$(database)/documents/gameFolders/$(data.parentId)) &&
              get(/databases/$(database)/documents/gameFolders/$(data.parentId)).data.userId == data.userId);
    }
    
    // Validate parentId ownership for assignment folders (parent must belong to same user)
    function isValidAssignmentParentOwnership(data) {
      return !data.keys().hasAny(['parentId']) || 
             data.parentId == null || 
             (data.parentId is string && 
              exists(/databases/$(database)/documents/assignmentFolders/$(data.parentId)) &&
              get(/databases/$(database)/documents/assignmentFolders/$(data.parentId)).data.userId == data.userId);
    }
    
    // High scores â€“ public read, server-only writes to prevent tampering
    match /highScores/{highScoreId} {
      allow read: if true;
      allow write: if isServiceAccount();
    }

    
    // Games collection
    match /games/{gameId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isTeacherOrAdmin();
    }
    
    // Game configurations collection (admin only)
    match /gameConfigs/{configId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // User-created game configurations - CRITICAL COLLECTION
    match /userGameConfigs/{configId} {
      // The key fix - allow all users to read documents, but implement client-side filtering
      // This is necessary for the 'where' query to work properly
      allow read: if true;
      
      // TEMPORARY: More permissive rule for debugging Place Value Showdown
      allow create: if 
        isAuthenticated() &&
        request.resource.data.type == 'place-value-showdown' &&
        request.resource.data.userId == request.auth.uid;
      
      // Original complex validation (keeping as backup)
      allow create: if 
        isAuthenticated() &&
        // Basic field validation
        (
          // Sort Categories Egg game validation
          (request.resource.data.type == 'sort-categories-egg' &&
          request.resource.data.title is string &&
          request.resource.data.title.size() > 0 &&
          request.resource.data.eggQty is number &&
          request.resource.data.eggQty > 0 &&
          request.resource.data.categories is list &&
          request.resource.data.categories.size() > 0) ||
          
          // Simple Whack-a-mole validation
          (request.resource.data.type == 'whack-a-mole' &&
          request.resource.data.title is string &&
          request.resource.data.categories is list) ||
          
          // Spinner Wheel validation
          (request.resource.data.type == 'spinner-wheel' &&
          request.resource.data.title is string &&
          request.resource.data.title.size() > 0 &&
          request.resource.data.items is list &&
          request.resource.data.items.size() > 0) ||
          
                // Anagram game validation
      (request.resource.data.type == 'anagram' &&
      request.resource.data.title is string &&
      request.resource.data.title.size() > 0 &&
      request.resource.data.anagrams is list &&
      request.resource.data.anagrams.size() > 0) ||
      
      // Sentence Sense game validation
      (request.resource.data.type == 'sentence-sense' &&
      request.resource.data.title is string &&
      request.resource.data.title.size() > 0 &&
      request.resource.data.sentences is list &&
      request.resource.data.sentences.size() > 0) ||
      
      // Place Value Showdown game validation
      (request.resource.data.type == 'place-value-showdown' &&
      request.resource.data.title is string &&
      request.resource.data.title.size() > 0 &&
      request.resource.data.numberOfCards is number &&
      request.resource.data.numberOfCards >= 1 &&
      request.resource.data.numberOfCards <= 5 &&
      request.resource.data.objective is string &&
      request.resource.data.objective in ['largest', 'smallest'] &&
      request.resource.data.winningScore is number &&
      request.resource.data.winningScore > 0 &&
      request.resource.data.includeDecimal is bool &&
      (!request.resource.data.includeDecimal || (
        request.resource.data.decimalPlaces is number &&
        request.resource.data.decimalPlaces >= 1 &&
        request.resource.data.decimalPlaces <= 3
      )) &&
      // Additional fields generated by the configuration framework
      request.resource.data.userId is string &&
      request.resource.data.email is string &&
      request.resource.data.createdAt is timestamp &&
      (request.resource.data.description == null || request.resource.data.description is string) &&
      (request.resource.data.difficulty == null || request.resource.data.difficulty is string) &&
      (request.resource.data.timeLimit == null || request.resource.data.timeLimit is number) &&
      (request.resource.data.targetScore == null || request.resource.data.targetScore is number) &&
      (request.resource.data.aiDifficulty == null || request.resource.data.aiDifficulty is string) &&
      (request.resource.data.playerName == null || request.resource.data.playerName is string) &&
      (request.resource.data.teacherName == null || request.resource.data.teacherName is string) &&
      (request.resource.data.enableHints == null || request.resource.data.enableHints is bool) &&
      (request.resource.data.gameMode == null || request.resource.data.gameMode is string) &&
      (request.resource.data.share == null || request.resource.data.share is bool)) ||
      
      // Word Volley game validation
      (request.resource.data.type == 'word-volley' &&
      request.resource.data.title is string &&
      request.resource.data.title.size() > 0 &&
      request.resource.data.targetCategory is map &&
      request.resource.data.targetCategory.words is list &&
      request.resource.data.targetCategory.words.size() > 0 &&
      request.resource.data.nonTargetCategory is map &&
      request.resource.data.nonTargetCategory.words is list &&
      request.resource.data.nonTargetCategory.words.size() > 0) ||
      
      // Name It game validation
      (request.resource.data.type == 'name-it' &&
      request.resource.data.title is string &&
      request.resource.data.title.size() > 0 &&
      request.resource.data.description is string &&
      request.resource.data.gameTime is number &&
      request.resource.data.gameTime >= 20 &&
      request.resource.data.gameTime <= 900 &&
      request.resource.data.difficulty is string &&
      request.resource.data.difficulty in ['debug', 'easy', 'medium', 'hard'] &&
      request.resource.data.enableWebRTC is bool &&
      request.resource.data.enableSound is bool &&
      request.resource.data.share is bool &&
      request.resource.data.userId is string &&
      request.resource.data.email is string &&
      request.resource.data.createdAt is timestamp &&
      request.resource.data.updatedAt is timestamp)
    ) &&
        // Common fields validation
        request.resource.data.userId == request.auth.uid;
      
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    match /assignments/{assignmentId} {
      // Allow all authenticated users to read assignments
      // This enables token-based queries to work for authenticated students
      // Application logic ensures students only access appropriate assignments
      allow read: if isAuthenticated();

      // Allow service accounts full access
      allow read, write: if isServiceAccount();

      // Teachers and Admins can create if data is valid
      allow create: if isTeacherOrAdmin() &&
        (!('useEmailLinkAuth' in request.resource.data) || request.resource.data.useEmailLinkAuth is bool);

      // Teachers/Admins can update/delete
      allow update, delete: if isTeacherOrAdmin();

      // Allow teachers/admins full access to assign games
      allow write: if isTeacherOrAdmin();

      // Allow students to update only specific fields
      allow update: if isAuthenticated() &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'completedCount', 'lastCompletedAt', 'emailSent']);

      // Allow direct access updates (for students completing assignments via email links)
      allow update: if 
        // Even when not authenticated, allow updating only specific fields
        request.auth == null &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'completedCount', 'lastCompletedAt']);

      // Allow Firebase Functions to patch specific fields
      allow update: if request.auth != null &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['emailSent', 'useEmailLinkAuth', 'beta']);
    }
    
    // Attempts collection - track student game attempts
    match /attempts/{attemptId} {
      // Allow creating attempts for anyone - students need this when completing assignments
      allow create: if true;
      
      // Only teachers can read attempts (to see student progress)
      allow read: if isTeacherOrAdmin();
      
      // Only the teacher who created the assignment can update/delete attempts
      allow update, delete: if isTeacherOrAdmin();
    }
    
    
    // Users collection
    match /users/{userId} {
      // Allow users to read their own document + teachers/admins can read others
      // Also allow reading documents where email matches the authenticated user's email (for migration)
      allow read: if isAuthenticated() && (
        request.auth.uid == userId ||  // Users can read their own document
        isTeacherOrAdmin() || 
        isAdmin() ||
        (request.auth.token.email != null && resource.data.email == request.auth.token.email)  // Allow reading by matching email
      );
      
      // Allow users to query by their own email (for migration/linking purposes)
      allow list: if isAuthenticated() && 
        request.auth.token.email != null;
      
      // Allow teachers and admins to list students assigned to them
      allow list: if isTeacherOrAdmin();
      
      // Allow unauthenticated users to query for temporary password checking
      // This is needed for the login page to check if a user has a temporary password
      allow list: if request.auth == null;
      
      // New permission model:
      // 1. Allow admins to perform any operations on any user document
      // 2. Allow users to create their own document (for new accounts and linking Google Auth)
      // 3. Allow users to update their own document BUT not change their role
      // 4. Allow auto-assignment of students to teachers when completing assignments
      // 5. Allow teachers to create student documents
      allow create: if isAdmin() || 
        request.auth.uid == userId ||
        // Allow creating student records for auto-assignment (when completing assignments)
        (request.resource.data.role == 'student' && 
         request.resource.data.teacherId is string &&
         request.resource.data.email is string &&
         request.resource.data.autoAssigned == true) ||
        // Allow teachers to create student documents
        (isTeacherOrAdmin() &&
         request.resource.data.role == 'student' &&
         request.resource.data.teacherId == request.auth.uid &&
         request.resource.data.email is string &&
         request.resource.data.name is string) ||
        // Allow authenticated users to create documents for migration (when email matches)
        (isAuthenticated() &&
         request.auth.token.email != null &&
         request.resource.data.email == request.auth.token.email &&
         request.auth.uid == userId);
         
      allow delete: if isAdmin() ||
        // Allow users to delete legacy documents during migration (when email matches)
        (isAuthenticated() &&
         request.auth.token.email != null &&
         resource.data.email == request.auth.token.email);
      
      allow update: if isAdmin() || 
        (request.auth.uid == userId && 
         // Users can't change their own role
         request.resource.data.role == resource.data.role) ||
        // Allow auto-assignment updates for students
        (resource.data.role == 'student' &&
         request.resource.data.role == 'student' &&
         // Only allow updating specific auto-assignment fields
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['teacherId', 'teacherEmail', 'name', 'updatedAt', 'lastAssignmentCompletion', 'autoAssigned']) &&
         request.resource.data.teacherId is string &&
         request.resource.data.autoAssigned == true) ||
        // Allow teachers to update their students' documents
        (isTeacherOrAdmin() &&
         resource.data.role == 'student' &&
         request.resource.data.role == 'student' &&
         resource.data.teacherId == request.auth.uid &&
         request.resource.data.teacherId == request.auth.uid);
    }

    // Per-user results â€“ allow students to write their own result docs; server reads/updates
    match /users/{userId}/results/{assignmentId} {
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow read: if isAuthenticated() && request.auth.uid == userId;
      // Prevent client updates/deletes; server can update via service account if needed
      allow update, delete: if isServiceAccount();
    }

    // Per-user assignments (student-facing list and status updates)
    match /users/{userId}/assignments/{assignmentId} {
      // Students can read their own assignments
      allow read: if isAuthenticated() && request.auth.uid == userId;

      // Teachers/Admins can create assignments for students
      allow create: if isTeacherOrAdmin() && request.resource.data.userId == userId;

      // Students can only update limited status fields on their own docs
      allow update: if isAuthenticated() &&
        request.auth.uid == userId &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'lastCompletedAt', 'completedCount']);

      // Teachers/Admins can update/delete
      allow update, delete: if isTeacherOrAdmin();
    }

    // Per-user game results (student writes; teacher/admin reads elsewhere)
    match /users/{userId}/results/{resultId} {
      // Students can create/update their own results
      allow create, update: if isAuthenticated() && request.auth.uid == userId;

      // Students can read their own results
      allow read: if isAuthenticated() && request.auth.uid == userId;

      // Teachers/Admins can read results for dashboards via aggregated collections (not here)
    }

    // Guest session logs (anonymous users only)
    match /guestSessions/{uid}/{sessionId} {
      allow create, update, read: if isAuthenticated() &&
        request.auth.uid == uid &&
        request.auth.token.firebase != null &&
        request.auth.token.firebase.sign_in_provider == 'anonymous';
      allow delete: if false;
    }
    
    // Sort Categories Egg collection
    match /sortCategoriesEgg/{configId} {
      allow read: if true;
      allow create, update, delete: if true;
    }

    // Blank Game Templates collection
    match /blankGameTemplates/{templateId} {
      // Allow teachers and admins to read blank templates
      allow read: if isTeacherOrAdmin();
      // Only admins can modify blank templates
      allow write: if isAdmin();
    }
    
    // Category Templates collection
    match /categoryTemplates/{templateId} {
      // Allow teachers and admins to read and write category templates
      allow read: if isTeacherOrAdmin();
      allow write: if isTeacherOrAdmin();
    }

    // Assignment tokens collection
    match /assignmentTokens/{tokenId} {
      // Only service accounts and cloud functions can create tokens
      allow create: if isServiceAccount();
      
      // Only service accounts and cloud functions can read and update tokens
      allow read, update: if isServiceAccount();
      
      // No one can delete tokens (they should be marked as used instead)
      allow delete: if false;
    }

    // Game Folders collection - for organizing games into folders
    match /gameFolders/{folderId} {
      // Users can read their own folders
      allow read: if isAuthenticated() && (isTeacherOrAdmin() || isAdmin());
      
      // Users can create folders for themselves with enhanced validation
      allow create: if isAuthenticated() && 
        isTeacherOrAdmin() && 
        request.resource.data.userId == request.auth.uid &&
        isValidFolderData(request.resource.data) &&
        isValidFolderDepth(request.resource.data) &&
        isValidParentOwnership(request.resource.data);
      
      // Users can update their own folders with field restrictions
      allow update: if isAuthenticated() && 
        isTeacherOrAdmin() && 
        request.auth.uid == resource.data.userId &&
        isValidFolderData(request.resource.data) &&
        isValidFolderDepth(request.resource.data) &&
        isValidParentOwnership(request.resource.data) &&
        request.resource.data.userId == resource.data.userId;
      
      // Users can delete their own folders
      allow delete: if isAuthenticated() && (isTeacherOrAdmin() || isAdmin());
    }

    // Game Folder Assignments collection - for assigning games to folders
    match /gameFolderAssignments/{assignmentId} {
      // Users can read their own assignments
      allow read: if isAuthenticated() && (isTeacherOrAdmin() || isAdmin());
      
      // Users can create assignments for themselves with enhanced validation
      allow create: if isAuthenticated() && 
        isTeacherOrAdmin() && 
        request.resource.data.userId == request.auth.uid;
      
      // Users can update their own assignments with field restrictions
      allow update: if isAuthenticated() && 
        isTeacherOrAdmin() && 
        request.auth.uid == resource.data.userId;
      
      // Users can delete their own assignments
      allow delete: if isAuthenticated() && (isTeacherOrAdmin() || isAdmin());
    }

    // Assignment Folders collection - for organizing assignments into folders
    match /assignmentFolders/{folderId} {
      // Users can read their own folders
      allow read: if isAuthenticated() && (isTeacherOrAdmin() || isAdmin());
      
      // Users can create folders for themselves with enhanced validation
      allow create: if isAuthenticated() && 
        isTeacherOrAdmin() && 
        request.resource.data.userId == request.auth.uid &&
        isValidFolderData(request.resource.data) &&
        isValidFolderDepth(request.resource.data) &&
        isValidAssignmentParentOwnership(request.resource.data);
      
      // Users can update their own folders with field restrictions
      allow update: if isAuthenticated() && 
        isTeacherOrAdmin() && 
        request.auth.uid == resource.data.userId &&
        isValidFolderData(request.resource.data) &&
        isValidFolderDepth(request.resource.data) &&
        isValidAssignmentParentOwnership(request.resource.data) &&
        request.resource.data.userId == resource.data.userId;
      
      // Users can delete their own folders
      allow delete: if isAuthenticated() && (isTeacherOrAdmin() || isAdmin());
    }

    // Assignment Folder Assignments collection - for assigning assignments to folders
    match /assignmentFolderAssignments/{assignmentId} {
      // Users can read their own assignments
      allow read: if isAuthenticated() && (isTeacherOrAdmin() || isAdmin());
      
      // Users can create assignments for themselves with enhanced validation
      allow create: if isAuthenticated() && 
        isTeacherOrAdmin() && 
        request.resource.data.userId == request.auth.uid;
      
      // Users can update their own assignments with field restrictions
      allow update: if isAuthenticated() && 
        isTeacherOrAdmin() && 
        request.auth.uid == resource.data.userId;
      
      // Users can delete their own assignments
      allow delete: if isAuthenticated() && (isTeacherOrAdmin() || isAdmin());
    }

    // Email Link Authentication Requests - for converting email link users to authenticated users
    match /emailLinkAuthRequests/{requestId} {
      // Allow unauthenticated users to create requests (following pattern from attempts/assignments)
      allow create: if 
        // Anyone can create a request, but with strict validation
        request.resource.data.email is string &&
        request.resource.data.email.size() > 0 &&
        request.resource.data.email.matches('.*@.*\\..*') &&  // Basic email format
        request.resource.data.createdAt is timestamp &&
        request.resource.data.status == 'pending';
      
      // Allow service accounts (Firebase Functions) to read and update requests
      allow read, update: if isServiceAccount();
      
      // Allow the requester to read their own request by checking email in query
      // This follows the pattern used in assignments for unauthenticated access
      allow read: if request.auth == null;
      
      // Allow cleanup - service accounts can delete processed requests
      allow delete: if isServiceAccount();
    }



    // System configuration (admin only)
    match /config/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Text-to-Speech requests (for Amazon Polly integration)
    match /ttsRequests/{requestId} {
      // Allow anyone to create TTS requests (for educational games)
      allow create: if true;
      
      // Allow service accounts (Firebase Functions) to read requests for processing
      allow read: if isServiceAccount();
      
      // Allow cleanup - service accounts can delete processed requests
      allow delete: if isServiceAccount();
    }

    // Text-to-Speech results (for Amazon Polly integration)
    match /ttsResults/{requestId} {
      // Allow service accounts (Firebase Functions) to write results
      allow create, write: if isServiceAccount();
      
      // Allow anyone to read their TTS results (using requestId as access control)
      allow read: if true;
      
      // Allow cleanup - anyone can delete results after use
      allow delete: if true;
    }

    // Category Generation (LLM) - Firestore-triggered flow
    match /categoryGenRequests/{requestId} {
      // Allow any authenticated user to create a request; backend will validate role
      allow create: if isAuthenticated();
      // Disallow listing; no reads by clients
      allow get: if false;
      allow list: if false;
      allow read: if false;
    }

    match /categoryGenResults/{requestId} {
      // Cloud Functions writes results
      allow write: if isServiceAccount();
      // Allow authenticated clients to read their specific result doc by ID
      allow get: if isAuthenticated();
      // Block listing entire collection
      allow list: if false;
      // Disallow other reads
      allow read: if false;
    }
  }
} 